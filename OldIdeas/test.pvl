  given int min;
  given int extent;
  given int factor;
  given int y;
  context min <= y;
  context min == 0;
  context y < min+extent;
  context y < extent;
  context extent > 0;
  context factor > 0;
  context extent < 100;
  context factor < 1000;
int f(){
  assert(y <= extent-1);
  assert(factor > 0);
  // assert(lessThenFactor(y, extent-1, factor));
  assert(y*factor <= (extent-1)*factor);
  // assert((y-min)*factor <= (extent-1)*factor);
}
//     loop_invariant min <= i;
//     loop_invariant i <= min+extent;
//   for(int i = min; i < min+extent; i++){
//     assert(factor > 0);
//     assert(i - min <= extent-1);
//     // assert((i-min)*factor <= (extent-1)*factor);
//   }
// }


ensures (i <= j && fac > 0) ==> (i*fac <= j*fac);
ensures \result == (i <= j && fac > 0);
bool lessThenFactor(int i, int j,int fac);
  
// axiom {
//   (forall i: Int ,j: Int, fac: Int; (i <= j && fac > 0) ==> lessThenFactor(i,j,fac))
// }

// axiom {
//   (forall i: Int ,j: Int, fac: Int :: {lessThenFactor(i,j,fac)} lessThenFactor(i,j,fac) ==> (i*fac <= j*fac))
// }